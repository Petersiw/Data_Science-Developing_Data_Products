a
```{r, echo = False, include=T}
Sys.setenv("plotly_username" = "PeterSiw")
Sys.setenv("plotly_api_key" = "HRWopjpOjQ1Kn0nTFEHe")
a <-plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter",
color = ~factor(cyl)) %>%
layout(xaxis = list(title = "Weight"),
yaxis = list(title = "Miles per Gallon"),
title = "Scatter Plot of Weight vs Miles per Gallon")
api_create(a, "Weight vs Miles per Gallon")
a
a <-plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter",
color = ~factor(cyl)) %>%
layout(xaxis = list(title = "Weight"),
yaxis = list(title = "Miles per Gallon"),
title = "Scatter Plot of Weight vs Miles per Gallon")
plot_ly(mtcars, x = ~wt, y = ~mpg, type = "scatter", color = ~factor(cyl)) %>%
layout(xaxis = list(title = "Weight"),
yaxis = list(title = "Miles per Gallon"),
title = "Scatter Plot of Weight vs Miles per Gallon")
install.packages(c("data.table", "devtools", "dplyr"))
install.packages(c("data.table", "devtools", "dplyr"))
install.packages(c("data.table", "devtools", "dplyr"))
install.packages("Matrix")
install.packages("mgcv")
install.packages("data.table")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("ISLR", "googleVis", "tidyr")
install.packages("ISLR", "googleVis", "tidyr")
install.packages("tidyr")
install.''
install.packages("plotly")
install.packages("caret", "randomForest", "doParallel")
install.packages("caret")
install.packages("randomForest")
install.packages("doParallel")
install.packages("parallel")
install.packages("ISLR")
install.packages("tidyr")
install.packages("zoo", "xts")
install.packages("zoo")
install.packages("xts")
install.packages("googleVis")
install.packages("swirl")
install.packages("devtools")
install.packages("lubridate")
install.packages("leaflet")
install.packages(c("DRR", "RCurl", "caret", "curl", "ddalpha", "devtools", "foreach", "git2r", "hexbin", "htmlwidgets", "httpuv", "iterators", "lava", "lubridate", "openssl", "recipes", "sfsmisc", "sp", "testthat", "tidyr", "tidyselect", "timeDate", "viridis", "withr", "xts", "yaml", "zoo"))
install.packages(c("BH", "MASS", "Rcpp", "digest", "mgcv", "nlme", "reshape2", "rlang", "rpart", "stringr", "tibble", "viridisLite"), lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
temp <- installed.packages()
installedpkg <- as.vector(temp(is.na(temp[, "Priority"]), 1))
installedpkg <- as.vector(temp[is.na(temp[, "Priority"]), 1])
head(installedpkg)
getwd()
save(installedpkg, file = "old_pkg.rda")
installedpkg <- load("old_pkg.rda")
temp <- installed.packages()
installedpkgs.new <- as.vector(temp[is.na(temp[,"Priority"]), 1])
missing <- setdiff(installedpkg, installedpkgs.new)
install.packages(missing)
head(installedpkg)
load("old_pkg.rda")
load("old_pkg.rda")
temp <- installed.packages()
installedpkgs.new <- as.vector(temp[is.na(temp[,"Priority"]), 1])
missing <- setdiff(installedpkg, installedpkgs.new)
install.packages(missing)
temp <- installed.packages()
installed.packages()
load("old_pkg.rda")
temp <- installed.packages()
installedpkgs.new <- as.vector(temp[is.na(temp[, "Priority"]), 1])
temp1 <- installed.packages()
installedpkgs.new <- as.vector(temp1[is.na(temp1[, "Priority"]), 1])
missing <- setdiff(installedpkg, installedpkgs.new)
install.packages(c("broom", "caret", "curl", "ddalpha", "lava", "lubridate", "psych", "randomForest", "stringi", "viridis", "withr", "xts", "yaml"))
install.packages(c("Matrix", "Rcpp", "bindr", "bindrcpp", "cluster", "nlme", "plogr"), lib="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
install.packages("swirlify")
library(swirlify)
getwd()
new_lesson("Lesson 1", "My First Lesson")
wq_message(output = "Welcome to Lesson 1")
wq_command()
add_to_manifest()
test_lesson()
demo_lesson()
demo_lesson()
6
info()
5 + 5
get_current_lesson()
new_lesson("Lesson 2", "My First Lesson")
wq_multiple()
wq_multiple()
add_to_manifest()
test_lesson()
demo_lesson()
wq_figure()
plot(1:10)
demo_lesson()
demo_lesson()
wq_figure()
test_lesson()
test_course()
demo_lesson()
clear()
library(shiny)
runExample("01_hello")
runApp()
setwd("~/Desktop/Final_Project")
runApp()
data()
head(Formaldehyde)
head(WWWusage)
head(Nile)
head(HairEyeColor)
head(euro)
head(euro, 20)
euro
head(morley)
head(warpbreaks)
unique(warpbreaks)
head(uspop)
head(AirPassengers)
head(Titanic)
Titanic
head(BOD)
BOD
npk
precip
attenu
attitude
airquality
install.packages(rsconnect)
install.packages("rsconnect")
summary(airquality)
m1 <- lm(Ozone ~ Solar.R + Wind + Temp, data = airquality)
summary(m1)
plot(m1)
plot(x = Temp, y = Ozone)
plot(x = Temp, y = Ozone, data = airquality)
with(airquality, plot(x = Temp, y = Ozone))
with(airquality, plot(x = Temp, y = Ozone))
with(airquality,
plot(x = Temp, y = Ozone, pch = 16, col = "grey",
main = "Plot of Temperature against Ozone",
xlab = "Temperature", ylab = "Ozone Level"))
library(ggplot2)
help(ggplot)
ggplot(data = airquality, aes(x = Temp, y = Ozone))
ggplot(data = airquality, aes(x = Temp, y = Ozone)) +
geom_point(colour = "steelgrey")
ggplot(data = airquality, aes(x = Temp, y = Ozone)) +
geom_point(colour = "steelblue")
ggplot(data = airquality, aes(x = Temp, y = Ozone)) +
geom_point(colour = "steelblue") +
labs(title = "Plot of Temperature against Ozone",
x = "Temperature", y = "Ozone Level")
ggplot(data = airquality, aes(x = Temp, y = Ozone)) +
geom_point(colour = "steelblue") +
labs(title = "Plot of Temperature against Ozone",
x = "Temperature", y = "Ozone Level") +
theme(plot.title = element_text(hjust = 0.5))
m2 <- lm(Ozone ~ I(Temperature^2))
m2 <- lm(Ozone ~ I(Temperature^2), data = airquality)
m2 <- lm(Ozone ~ I(Temp^2), data = airquality)
summary(m2)
#predicted values
pred <- data.frame(Oz_pred = predict(m1, airquality), airquality$Temp)
pred
#predicted values
pred <- data.frame(Oz_pred = predict(m1, airquality),
pred_Temp = airquality$Temp)
#add regression line
plot + geom_line(data = pred, aes(x = pred_Temp, y = Oz_pred), colour = "red")
load(airquality)
m1 <- lm(Ozone ~ Solar.R + Wind + Temp, data = airquality)
#predicted values
pred <- data.frame(Oz_pred = predict(m1, airquality),
pred_Temp = airquality$Temp)
#form original plot
library(ggplot2)
plot <- ggplot(data = airquality, aes(x = Temp, y = Ozone)) +
geom_point(colour = "steelblue") +
labs(title = "Plot of Temperature against Ozone",
x = "Temperature", y = "Ozone Level") +
theme(plot.title = element_text(hjust = 0.5))
#add regression line
plot + geom_line(data = pred, aes(x = pred_Temp, y = Oz_pred), colour = "red")
m2 <- lm(Ozone ~ I(Temp^2), data = airquality)
summary(m2)
m3 <- lm(Ozone ~ I(Temp^3), data = airquality)
summary(m3)
help(for)
?for()
?for
??for (variable in vector) {
}
??for (variable in vector) {
}
summary(m1)
summary(m1)$
F-stats
summary(m1)$F
?summary.lm
for(n in 1:10) {
m <- lm(Ozone ~ I(Temp^n), data = airquality)
f_val <- summary(m)$fstatistics
f_p <- pf(f[1], f[2], f[3], lower = F)
print("When exponent is ", n, "F statistics has a p value of ", f_p)
}
f <- summary(m)$fstatistics
for(n in 1:10) {
m <- lm(Ozone ~ I(Temp^n), data = airquality)
f <- summary(m)$fstatistics
f_p <- pf(f[1], f[2], f[3], lower = F)
print("When exponent is ", n, "F statistics has a p value of ", f_p)
}
for(n in 1:10) {
m <- lm(Ozone ~ I(Temp^n), data = airquality)
f <- summary(m)$fstatistics
f_p <- pf(f[1], f[2], f[3], lower = F)
print("When exponent is ", n, "F statistics has a p value of ", f_p)
}
for(n in 1:10) {
m <- lm(Ozone ~ I(Temp^n), data = airquality)
f <- str(summary(m)$fstatistics)
f_p <- pf(f[1], f[2], f[3], lower = F)
print("When exponent is ", n, "F statistics has a p value of ", f_p)
}
m <- lm(Ozone ~ I(Temp^2), data = airquality)
f <- str(summary(m)$fstatistics)
summary(m)$fstatistics
summary(m)
for(n in 1:10) {
m <- lm(Ozone ~ I(Temp^n), data = airquality)
f <- str(summary(m)$fstatistic)
f_p <- pf(f[1], f[2], f[3], lower = F)
print("When exponent is ", n, "F statistics has a p value of ", f_p)
}
m <- lm(Ozone ~ I(Temp^2), data = airquality)
f <- str(summary(m)$fstatistic)
f_p <- pf(f[1], f[2], f[3], lower = F)
f <- as.numeric(str(summary(m)$fstatistic))
f_p <- pf(f[1], f[2], f[3], lower = F)
f_p
summary(m)
pf(f[1], f[2], f[3], lower = F)
f
summary(m)$fstatistic
str(summary(m)$fstatistic)
summary(m)$fstatistic[1]
f <- summary(m)$fstatistic
f_p <- pf(f[1], f[2], f[3], lower = F)
f_p
for(n in 1:10) {
m <- lm(Ozone ~ I(Temp^n), data = airquality)
f <- summary(m)$fstatistic
f_p <- pf(f[1], f[2], f[3], lower = F)
print("When exponent is ", n, "F statistics has a p value of ", f_p)
}
paste("When exponent is ", n, "F statistics has a p value of ", f_p)
for(n in 1:10) {
m[n] <- lm(Ozone ~ I(Temp^n), data = airquality)
f[n] <- summary(m)$fstatistic
f_p[n] <- pf(f[n][1], f[n][2], f[n][3], lower = F)
paste("When exponent is", n, "F statistics has a p value of ", f_p[n])
}
for(n in 1:10) {
m <- lm(Ozone ~ I(Temp^n), data = airquality)
f <- summary(m)$fstatistic
f_p <- pf(f[1], f[2], f[3], lower = F)
paste("When exponent is", n, "F statistics has a p value of ", f_p)
}
for(n in 1:10) {
m <- lm(Ozone ~ I(Temp^(n)), data = airquality)
f <- summary(m)$fstatistic
f_p <- pf(f[1], f[2], f[3], lower = F)
paste("When exponent is", n, "F statistics has a p value of ", f_p)
}
for(n in 1:10) {
m <- lm(Ozone ~ I(Temp^(n)), data = airquality)
f <- summary(m)$fstatistic
f_p <- pf(f[1], f[2], f[3], lower = F)
paste("When exponent is", n, "F statistics has a p value of ", f_p)
}
for(n in 1:10) {
m <- lm(Ozone ~ I(Temp^(n)), data = airquality)
f <- summary(m)$fstatistic
f_p <- pf(f[1], f[2], f[3], lower = F)
paste("When exponent is", n, "F statistics has a p value of ", f_p)
}
for(n in 1:10) {
m[n] <- lm(Ozone ~ I(Temp^(n)), data = airquality)
f <- summary(m[n])$fstatistic
f_p <- pf(f[1], f[2], f[3], lower = F)
paste("When exponent is", n, "F statistics has a p value of ", f_p)
}
for(n in 1:10) {
m <- lm(Ozone ~ I(Temp^(n)), data = airquality)
f <- summary(m)$fstatistic
f_p <- pf(f[1], f[2], f[3], lower = F)
paste("When exponent is", n, "F statistics has a p value of ", f_p)
}
for(n in 1:10) {
reg_data <- data.frame(Oz = airquality$Ozone, Tem = airquality$Temp)
reg_data$Tem <- reg_data$Tem^n
m <- lm(Oz ~ Tem, data = reg_data)
f <- summary(m)$fstatistic
f_p <- pf(f[1], f[2], f[3], lower = F)
paste("When exponent is", n, "F statistics has a p value of ", f_p)
}
reg_data <- data.frame(Oz = airquality$Ozone, Tem = airquality$Temp)
reg_data
reg_data <- data.frame(Oz = airquality$Ozone, Tem = airquality$Temp)
reg_data$Tem <- reg_data$Tem^3
m <- lm(Oz ~ Tem, data = reg_data)
f <- summary(m)$fstatistic
f_p <- pf(f[1], f[2], f[3], lower = F)
paste("When exponent is", "3", "F statistics has a p value of ", f_p)
for(n in 1:10) {
reg_data <- data.frame(Oz = airquality$Ozone, Tem = airquality$Temp)
reg_data$Tem <- reg_data$Tem^n
m <- lm(Oz ~ Tem, data = reg_data)
f <- summary(m)$fstatistic
f_p <- pf(f[1], f[2], f[3], lower = F)
paste("When exponent is", n, "F statistics has a p value of ", f_p)
}
load(airquality)
load(airquality)
m1 <- lm(Ozone ~ Solar.R + Wind + Temp, data = airquality)
#predicted values
pred <- data.frame(Oz_pred = predict(m1, airquality),
pred_Temp = airquality$Temp)
#form original plot
library(ggplot2)
plot <- ggplot(data = airquality, aes(x = Temp, y = Ozone)) +
geom_point(colour = "steelblue") +
labs(title = "Plot of Temperature against Ozone",
x = "Temperature", y = "Ozone Level") +
theme(plot.title = element_text(hjust = 0.5))
#add regression line
plot + geom_line(data = pred, aes(x = pred_Temp, y = Oz_pred), colour = "red")
m2 <- lm(Ozone ~ I(Temp^2), data = airquality)
summary(m2)
for(n in 1:10) {
reg_data <- data.frame(Oz = airquality$Ozone, Tem = airquality$Temp)
reg_data$Tem <- reg_data$Tem^n
m <- lm(Oz ~ Tem, data = reg_data)
f <- summary(m)$fstatistic
f_p <- pf(f[1], f[2], f[3], lower = F)
paste("When exponent is", n, "F statistics has a p value of ", f_p)
}
for(n in 1:10) {
reg_data <- data.frame(Oz = airquality$Ozone, Tem = airquality$Temp)
reg_data$Tem <- reg_data$Tem^n
m <- lm(Oz ~ Tem, data = reg_data)
summary(m)
#f <- summary(m)$fstatistic
#f_p <- pf(f[1], f[2], f[3], lower = F)
#paste("When exponent is", n, "F statistics has a p value of ", f_p)
}
plot <- ggplot(data = airquality, aes(x = Temp, y = Ozone)) +
geom_point(colour = "steelblue") +
labs(title = "Plot of Temperature against Ozone",
x = "Temperature", y = "Ozone Level") +
theme(plot.title = element_text(hjust = 0.5))
m1 <- lm(Ozone ~ Solar.R + Wind + Temp, data = airquality)
#predicted values
pred <- data.frame(Oz_pred = predict(m1, airquality),
pred_Temp = airquality$Temp)
#form original plot
library(ggplot2)
plot <- ggplot(data = airquality, aes(x = Temp, y = Ozone)) +
geom_point(colour = "steelblue") +
labs(title = "Plot of Temperature against Ozone",
x = "Temperature", y = "Ozone Level") +
theme(plot.title = element_text(hjust = 0.5))
plot <- ggplot(data = airquality, aes(x = Temp, y = Ozone)) +
geom_point(colour = "steelblue") +
labs(title = "Plot of Temperature against Ozone",
x = "Temperature", y = "Ozone Level") +
theme(plot.title = element_text(hjust = 0.5))
load(airquality)
m1 <- lm(Ozone ~ Solar.R + Wind + Temp, data = airquality)
#predicted values
pred <- data.frame(Oz_pred = predict(m1, airquality),
pred_Temp = airquality$Temp)
#form original plot
library(ggplot2)
plot <- ggplot(data = airquality, aes(x = Temp, y = Ozone)) +
geom_point(colour = "steelblue") +
labs(title = "Plot of Temperature against Ozone",
x = "Temperature", y = "Ozone Level") +
theme(plot.title = element_text(hjust = 0.5))
plot
plot + geom_smooth(method = "lm", colour = "red")
plot + geom_smooth(method = "lm", colour = "red", se = F)
?geom_smooth
plot + geom_smooth(method = "gam", colour = "red", se = F)
plot + geom_smooth(method = "gam", formula = (y ~ poly(x, 2)),
colour = "red", se = F)
runApp()
setwd("~/Desktop/test")
runApp()
library(shiny)
runApp()
setwd("~/Desktop/Final_Project")
runApp()
runApp()
runApp()
runApp()
?poly
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
plot <- ggplot(data = airquality, aes(x = Temp, y = Ozone)) +
geom_point(colour = "steelblue") +
labs(title = "Plot of Temperature against Ozone",
x = "Temperature", y = "Ozone Level") +
theme(plot.title = element_text(hjust = 0.5))
plot + geom_smooth(method = "gam", formula = (y ~ poly(x, 2)),
colour = "red", se = F)
plot + geom_smooth(method = "gam", formula = (y ~ poly(x, 3)),
colour = "red", se = F)
plot + geom_smooth(method = "gam", formula = (y ~ poly(x, 4)),
colour = "red", se = F)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
input$Polynomials
plot <- ggplot(data = airquality, aes(x = Temp, y = Ozone)) +
geom_point(colour = "steelblue") +
labs(title = "Plot of Temperature against Ozone",
x = "Temperature", y = "Ozone Level") +
theme(plot.title = element_text(hjust = 0.5))
print(plot)
plot + geom_smooth(method = "gam", formula = (y ~ poly(x, 4)),
colour = "red", se = F)
airquality[complete.cases(airquality),]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Desktop/test')
runApp('~/Desktop/test')
runApp()
runApp()
runApp()
plot + geom_smooth(method = "gam", formula = (y ~ poly(x, 4.5)),
colour = "red", se = F)
plot + geom_smooth(method = "gam", formula = (y ~ poly(x, 5)),
colour = "red", se = F)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
n <- numeric(input$Polynomials)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
qplot()
qplot(x = Temp, y = Ozone)
qplot(data = airquality, x = Temp, y = Ozone)
qplot(data = airquality, x = Temp, y = Ozone) +
geom_smooth(method = "gam", formula = (y ~ poly(x, 2)))
qplot(data = airquality, x = Temp, y = Ozone) +
geom_smooth(method = "gam", formula = (y ~ poly(x, 2)),
se = F)
runApp()
poly()
?poly
runApp()
runApp()
runApp()
runApp()
